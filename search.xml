<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java集合类解析]]></title>
    <url>%2F2019%2F03%2F06%2Fjava%E9%9B%86%E5%90%88%E7%B1%BB%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>集合类</tag>
        <tag>面试必备</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActiveMQ初学习]]></title>
    <url>%2F2019%2F03%2F06%2FActiveMQ%E5%88%9D%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[JMS1.1 什么是JMSJMS即Java消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
        <tag>中间件</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL基础练习]]></title>
    <url>%2F2019%2F03%2F06%2Fmysql%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[create table student( sno varchar(20) PRIMARY key, sname varchar(20) not NULL, ssex varchar(10) not null, sbirthday datetime, class varchar(20) ); create table teacher( tno varchar(20) PRIMARY key, tname varchar(20) not NULL, tsex varchar(10) not null, tbirthday datetime, prof varchar(20) not null, depart varchar(20) not null ); create table course( cno varchar(20) PRIMARY key, cname varchar(20) not NULL, tno varchar(20) not null, FOREIGN key(tno) REFERENCES teacher(tno) ); create table score( sno varchar(20) not null, cno varchar(20) not NULL, degree decimal, FOREIGN key(sno) REFERENCES student(sno), FOREIGN key(cno) REFERENCES course(cno) ); 数据库表内容如下：可自行插入teacher:student:score:course: 1.查询所有记录 SELECT * from student; 2.查询指定记录 SELECT sname,ssex,class from student; 3.查询教师所有单位即不重复的dpart列 DISTINCT 去掉重复 select DISTINCT depart from teacher; 4.查询score成绩为60-80的 select * from score where degree BETWEEN 60 and 80; 5.查询score成绩为85,86或88的 select * from score where degree in(85,86,88); 6.查询student表中‘95031’班或性别为‘女’的记录 select * from student where class=&apos;95031&apos; or ssex=&apos;女&apos;; 7.以class降序/升序(默认)查询student select * from student order by class desc; select * from student order by class asc; 8.以cno升序,degree降序查询score select * from score order by cno,degree desc; 9.查询95031班的人数 select count(*) from student where class=&apos;95031&apos;; 10.score中最高分的学生号和课程号 select sno,cno from score where degree=(select max(degree) from score); 11.每门课的平均成绩 group by 分组 select cno,avg(degree) from score group by cno; 12.查询score表中至少有两名学生选修的，并以3开头的课程的平均分数 select cno,avg(degree),count(*) from score group by cno having count(sno)&gt;=2 and cno like &apos;3%&apos;; 13.查询分数大于70,小于90的sno列 select sno,degree from score where degree BETWEEN 70 and 90; 14.多表：查询所有学生的sname,cno,degree select sname,cno,degree from student,score where student.sno=score.sno; 15.查询所有学生的sno,cname,degree select sno,cname,degree from score,course where course.cno=score.cno; 16.查询所有学生的sname,cname,degree(三表) select sname,cname,degree from student,course,score where student.sno=score.sno and course.cno=score.cno; 17.查询95031班学生每门课的平均分 select * from student where class=&apos;95031&apos;; select cno,avg(degree) from score where sno in (select sno from student where class=&apos;95031&apos;) group by cno; 18.查询3-105课程成绩高于109号同学3-105成绩的所有同学记录 select * from score where cno=&apos;3-105&apos; and degree&gt; (select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;); 19.查询成绩高于学号为109,课程号为3-105的成绩的所有记录 select * from score where degree&gt; (select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;); 20.查询和学号为108，101的同学同年出生的所有学生的sno,sname和sbirthday select year(sbirthday) from student where sno in(108,101); select sno,sname,sbirthday from student where year(sbirthday) in(select year(sbirthday) from student where sno in(108,101)); 21.张旭教师任课的学生成绩 select * from teacher where tname=&apos;张旭&apos;; select cno from course where tno=(select tno from teacher where tname=&apos;张旭&apos;); select * from score where cno=(select cno from course where tno=(select tno from teacher where tname=&apos;张旭&apos;)); 22.查询选修某课程的同学人数多于五人教师姓名 insert into score VALUES(&apos;101&apos;,&apos;3-105&apos;,&apos;90&apos;); insert into score VALUES(&apos;102&apos;,&apos;3-105&apos;,&apos;91&apos;); insert into score VALUES(&apos;104&apos;,&apos;3-105&apos;,&apos;89&apos;); select cno from score group by cno HAVING COUNT(*)&gt;5; select * from teacher; select * from course; select tno from course where cno=(select cno from score group by cno HAVING COUNT(*)&gt;5); select tname from teacher where tno=(select tno from course where cno=(select cno from score group by cno HAVING COUNT(*)&gt;5)); 23.查询95033班和95031班全体同学记录 select * from student where class in(95031,95033); 24.查询存在有85分以上成绩的课程cno select cno,degree from score where degree&gt;85; 25.查询出计算机系教师所教课程的成绩表 select * from teacher where depart=&apos;计算机系&apos;; select * from course where tno in (select tno from teacher where depart=&apos;计算机系&apos;); select * from score where cno in (select cno from course where tno in (select tno from teacher where depart=&apos;计算机系&apos;)); 26.查询计算机系和电子工程系不同职称的教师的tname和prof union 求并集 select prof from teacher where depart=&apos;电子工程系&apos;; select * from teacher where depart=&apos;计算机系&apos; and prof not in(select prof from teacher where depart=&apos;电子工程系&apos;) union select * from teacher where depart=&apos;电子工程系&apos; and prof not in(select prof from teacher where depart=&apos;计算机系&apos;); 27.查询选修编号为3-105课程并且成绩至少高于选修编号为3-245的同学的cno,sno,degree并且按照degree从高到低排列 select * from score where cno=&apos;3-245&apos;; select * from score where cno=&apos;3-105&apos;; 至少? 大于其中至少一个,any select * from score where cno=&apos;3-105&apos; and degree&gt;any(select degree from score where cno=&apos;3-245&apos;) order by degree desc; 28.查询选修编号3-105且成绩高于3-245的同学的cno,sno,degree select * from score where cno=&apos;3-105&apos; and degree&gt;all(select degree from score where cno=&apos;3-245&apos;); 29.查询所有教师同学的name sex birthday 别名？ as select tname as name,tsex as sex,tbirthday as birthday from teacher union select sname,ssex,sbirthday from student; 30.查询成绩比该课程平均成绩低的同学的成绩表 select cno,avg(degree) from score group by cno; select * from score a where degree&lt;(select avg(degree) from score b where a.cno = b.cno); 31.查询所有任课教师的Tname和Depart select * from teacher; 任课：课程表中有课程 select * from course; select tname,depart from teacher where tno in(select tno from course); 32.查询至少有两名男生的班号 select class from student where ssex = &apos;男&apos; group by class having COUNT(*)&gt;1; 33.查询student表中不姓王的同学的记录 select * from student where sname not like &apos;王%&apos;; 34.查询student中每个学生的姓名和年龄 年龄=当前年份-出生年份 select year(now()); select sname,year(now())-year(sbirthday) as &apos;年龄&apos; from student; 35.查询student中最大和最小的sbirthday日期值 max min select max(sbirthday) as &apos;最大&apos;,min(sbirthday) as &apos;最小&apos; from student; 36.以班号和年龄的从大到小顺序查询student的全部记录 select * from student order by class desc,sbirthday asc; 37.查询男教师及其所上课程 select * from teacher; select * from course where tno in (select tno from teacher where tsex=&apos;男&apos;); 38.查询最高分同学的sno,cno degree select MAX(degree) from score; select * from score where degree=(select MAX(degree) from score); 39.查询和李军同性别的所有同学的sname select * from student; SELECT ssex from student where sname=&apos;李军&apos;; select sname from student where ssex=(SELECT ssex from student where sname=&apos;李军&apos;); 40.查询和李军同性别且同班的sname select sname from student where ssex=(SELECT ssex from student where sname=&apos;李军&apos;) and class=(select class from student where sname=&apos;李军&apos;); 41.查询所有选修计算机导论课程的男同学的成绩表 select * from student where ssex=&apos;男&apos;; select * from course where cname=&apos;计算机导论&apos;; select * from score where cno=(select cno from course where cname=&apos;计算机导论&apos;) and sno in (select sno from student where ssex=&apos;男&apos;); 42.--等级查找--假设使用如下命令创建了一个grade表 create table grade_( low int(3), upp int(3), grade char(1) ); insert into grade_ values(90,100,&apos;A&apos;); insert into grade_ values(89,90,&apos;B&apos;); insert into grade_ values(70,79,&apos;C&apos;); insert into grade_ values(60,69,&apos;D&apos;); insert into grade_ values(0,59,&apos;E&apos;); 查询所有同学的sno cno grade select sno,cno,grade from score,grade_ where degree BETWEEN low and upp; 43.-- 四种连接查询-- -- 内连接 1.inner join 2.join -- 外连接 1.左连接left join或者left outer join 2.右连接right join或者right outer join 3.完全外连接 full join或者full outer join 创建两个表： create database testjoin use testjoin -- person: id,name,cardId create table person( id int, name varchar(20), cardId int ); -- card: id,name create table card( id int, name varchar(20) ); show TABLES insert into card VALUES(1,&apos;饭卡&apos;); insert into card VALUES(2,&apos;建行卡&apos;); insert into card VALUES(3,&apos;农行卡&apos;); insert into card VALUES(4,&apos;工行卡&apos;); insert into card VALUES(5,&apos;邮政卡&apos;); select * from card; insert into person VALUES(1,&apos;张三&apos;,1); insert into person VALUES(2,&apos;李四&apos;,3); insert into person VALUES(3,&apos;王五&apos;,4); insert into person VALUES(4,&apos;赵六&apos;,5); insert into person VALUES(5,&apos;钱七&apos;,2); select * from card; -- 并没有创建外键 -- 1.inner join 查询(内连接) select * from person inner join card on person.cardId=card.id; select * from person join card on person.cardId=card.id; -- 内联查询，其实就是两张表中的数据，通过某个字段相等，查询出相关数据 -- 2.left join 查询(左外连接) select * from person left join card on person.cardId=card.id; select * from person left outer join card on person.cardId=card.id; -- 左外连接，会把左边表里的所有数据取出，而右边表的数据有就显示，没有就显示null -- 3.right join 查询(右外连接) select * from person right join card on person.cardId=card.id; select * from person right outer join card on person.cardId=card.id; -- 右外连接，会把右边表里的所有数据取出，而左边表的数据有就显示，没有就显示null -- 4.full join(全外连接) select * from person full join card on person.cardId=card.id; mysql不支持全连接 所以另一种方式表示 select * from person left join card on person.cardId=card.id UNION select * from person right join card on person.cardId=card.id;]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>面试必备</tag>
        <tag>MYSQL</tag>
        <tag>SQL基础</tag>
      </tags>
  </entry>
</search>
