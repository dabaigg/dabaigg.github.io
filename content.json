{"pages":[{"title":"ABOUT","text":"关于自己 山西人 19届毕业 热爱编程 研究技术 JAVA后端的微微星火 期待自己早日成为行业大牛 关于工作 目前居于深圳 金融风控项目 兴趣方向 微服务，分布式 大数据相关 联系方式 Email: dabaiggo@163.com","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"ActiveMQ初学习","text":"JMS1.1 什么是JMSJMS即Java消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。作为静态网站生成器Hexo的一款主题，Icarus以简洁、现代和精美为设计理念。在灵活且强大的配置系统的助力下，用户可以自由实现单栏与多栏的灵活页面布局。同时，Icarus提供了丰富的插件与挂件供用户选择，让网站的个性化配置变得触手可及。此外，得力于全新设计的API，开发者可以更便捷地对Icarus进行深层定制。 Icarus的安装非常简单，您只需从GitHub的仓库中下载Icarus源码并解压到博客的主题目录下的icarus目录中(themes/icarus)。您也可以使用如下命令将此主题下载到博客中： 1 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 您可以省略-b来下载Icarus的最新开发版本。另外，您也可以将Icarus安装为Git子模块(submodule)到您的博客中： 1 git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 接下来，请将博客根目录下的_config.yml中的主题设置改为icarus： 1 theme: icarus 最后，请使用如下命令来启动Hexo本地测试服务器。祝您下笔如有神！ 1 hexo s 在此网站上您可以阅读开始使用系列文章来快速掌握Icarus。同时，如果需要更多的Icarus使用示例，您可以从GitHub上下载site分支的Icarus源码。","link":"/2019/03/06/ActiveMQ初学习/"},{"title":"[JVM]深入理解JAVA虚拟机(一)","text":"","link":"/2019/08/15/JVM-深入理解JAVA虚拟机(一)/"},{"title":"[Aviator]表达式引擎","text":"作为静态网站生成器Hexo的一款主题，Icarus以简洁、现代和精美为设计理念。在灵活且强大的配置系统的助力下，用户可以自由实现单栏与多栏的灵活页面布局。同时，Icarus提供了丰富的插件与挂件供用户选择，让网站的个性化配置变得触手可及。此外，得力于全新设计的API，开发者可以更便捷地对Icarus进行深层定制。Icarus的安装非常简单，您只需从GitHub的仓库中下载Icarus源码并解压到博客的主题目录下的icarus目录中(themes/icarus)。您也可以使用如下命令将此主题下载到博客中： 1 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 您可以省略-b来下载Icarus的最新开发版本。另外，您也可以将Icarus安装为Git子模块(submodule)到您的博客中： 1 git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 接下来，请将博客根目录下的_config.yml中的主题设置改为icarus： 1 theme: icarus 最后，请使用如下命令来启动Hexo本地测试服务器。祝您下笔如有神！ 1 hexo s 在此网站上您可以阅读开始使用系列文章来快速掌握Icarus。同时，如果需要更多的Icarus使用示例，您可以从GitHub上下载site分支的Icarus源码。","link":"/2019/08/15/Aviator-表达式引擎/"},{"title":"git的使用","text":"作为静态网站生成器Hexo的一款主题，Icarus以简洁、现代和精美为设计理念。在灵活且强大的配置系统的助力下，用户可以自由实现单栏与多栏的灵活页面布局。同时，Icarus提供了丰富的插件与挂件供用户选择，让网站的个性化配置变得触手可及。此外，得力于全新设计的API，开发者可以更便捷地对Icarus进行深层定制。Icarus的安装非常简单，您只需从GitHub的仓库中下载Icarus源码并解压到博客的主题目录下的icarus目录中(themes/icarus)。您也可以使用如下命令将此主题下载到博客中： 1 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 您可以省略-b来下载Icarus的最新开发版本。另外，您也可以将Icarus安装为Git子模块(submodule)到您的博客中： 1 git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 接下来，请将博客根目录下的_config.yml中的主题设置改为icarus： 1 theme: icarus 最后，请使用如下命令来启动Hexo本地测试服务器。祝您下笔如有神！ 1 hexo s 在此网站上您可以阅读开始使用系列文章来快速掌握Icarus。同时，如果需要更多的Icarus使用示例，您可以从GitHub上下载site分支的Icarus源码。","link":"/2019/03/15/git的使用/"},{"title":"[Hexo] Theme HuWeihuang","text":"This HuWeihuang theme created by HuWeihuang modified from the original Porter YuHsuan Live DemoHu Weihuang Blog : www.huweihuang.com Install HexoInstall Node.js and Git 123#For Macbrew install nodebrew install git Install hexo 123npm install hexo-cli -g#For more:https://hexo.io/zh-cn/index.html Theme UsageInit 123git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuangcd hexo-huweihuangnpm install Modify Modify _config.yml file with your own info.Especially the section: DeploymentReplace to your own repo!1234deploy: type: git repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt; branch: &lt;your-branch&gt; Sidebar settingsCopy your avatar image to &lt;root&gt;/img/ and modify the _config.yml:123sidebar: true # whether or not using Sidebar.sidebar-about-description: \"&lt;your description&gt;\"sidebar-avatar: img/&lt;your avatar path&gt; and activate your personal widget you like1234567widgets: # here are widget you can use, you can comment out- featured-tags- short-about- recent-posts- friends-blog- archive- category if you want to add sidebar widget, please add at layout/_widget. Signature SetupCopy your signature image to &lt;root&gt;/img/signature and modify the _config.yml:12signature: true # show signaturesignature-img: img/signature/&lt;your-signature-ID&gt; Go to top icon SetupMy icon is using iron man, you can change to your own icon at css/image. Post tagYou can decide to show post tags or not.1home_posts_tag: true Markdown renderMy markdown render engine plugin is hexo-renderer-markdown-it.12345678910# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' and if you want to change the header anchor ‘ℬ’, you can go to layout/post.ejs to change it.123456async(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){ anchors.options = { visible: 'hover', placement: 'left', icon: ℬ // this is the header anchor \"unicode\" icon }; Hexo Basics Some hexo command:1234hexo new post \"&lt;post name&gt;\" # you can change post to another layout if you wanthexo clean &amp;&amp; hexo generate # generate the static filehexo server # run hexo in local environmenthexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo! Have fun ^_^ Please Star this Project if you like it! Follow would also be appreciated!Peace!","link":"/2017/09/18/hexo-theme-huweihuang/"},{"title":"java集合类解析","text":"","link":"/2019/03/06/java集合类解析/"},{"title":"图解HTTP","text":"作为静态网站生成器Hexo的一款主题，Icarus以简洁、现代和精美为设计理念。在灵活且强大的配置系统的助力下，用户可以自由实现单栏与多栏的灵活页面布局。同时，Icarus提供了丰富的插件与挂件供用户选择，让网站的个性化配置变得触手可及。此外，得力于全新设计的API，开发者可以更便捷地对Icarus进行深层定制。 Icarus的安装非常简单，您只需从GitHub的仓库中下载Icarus源码并解压到博客的主题目录下的icarus目录中(themes/icarus)。您也可以使用如下命令将此主题下载到博客中： 1 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 您可以省略-b来下载Icarus的最新开发版本。另外，您也可以将Icarus安装为Git子模块(submodule)到您的博客中： 1 git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 接下来，请将博客根目录下的_config.yml中的主题设置改为icarus： 1 theme: icarus 最后，请使用如下命令来启动Hexo本地测试服务器。祝您下笔如有神！ 1 hexo s 在此网站上您可以阅读开始使用系列文章来快速掌握Icarus。同时，如果需要更多的Icarus使用示例，您可以从GitHub上下载site分支的Icarus源码。","link":"/2019/03/15/图解HTTP/"},{"title":"mysql基础练习","text":"mysql基础语句练习，可以应对一般sql笔试难度进行练习与学习。 create table student( sno varchar(20) PRIMARY key, sname varchar(20) not NULL, ssex varchar(10) not null, sbirthday datetime, class varchar(20) ); create table teacher( tno varchar(20) PRIMARY key, tname varchar(20) not NULL, tsex varchar(10) not null, tbirthday datetime, prof varchar(20) not null, depart varchar(20) not null ); create table course( cno varchar(20) PRIMARY key, cname varchar(20) not NULL, tno varchar(20) not null, FOREIGN key(tno) REFERENCES teacher(tno) ); create table score( sno varchar(20) not null, cno varchar(20) not NULL, degree decimal, FOREIGN key(sno) REFERENCES student(sno), FOREIGN key(cno) REFERENCES course(cno) ); 数据库表内容如下：可自行插入teacher:student:score:course: 1.查询所有记录 SELECT * from student; 2.查询指定记录 SELECT sname,ssex,class from student; 3.查询教师所有单位即不重复的dpart列 DISTINCT 去掉重复 select DISTINCT depart from teacher; 4.查询score成绩为60-80的 select * from score where degree BETWEEN 60 and 80; 5.查询score成绩为85,86或88的 select * from score where degree in(85,86,88); 6.查询student表中‘95031’班或性别为‘女’的记录 select * from student where class=&apos;95031&apos; or ssex=&apos;女&apos;; 7.以class降序/升序(默认)查询student select * from student order by class desc; select * from student order by class asc; 8.以cno升序,degree降序查询score select * from score order by cno,degree desc; 9.查询95031班的人数 select count(*) from student where class=&apos;95031&apos;; 10.score中最高分的学生号和课程号 select sno,cno from score where degree=(select max(degree) from score); 11.每门课的平均成绩 group by 分组 select cno,avg(degree) from score group by cno; 12.查询score表中至少有两名学生选修的，并以3开头的课程的平均分数 select cno,avg(degree),count(*) from score group by cno having count(sno)&gt;=2 and cno like &apos;3%&apos;; 13.查询分数大于70,小于90的sno列 select sno,degree from score where degree BETWEEN 70 and 90; 14.多表：查询所有学生的sname,cno,degree select sname,cno,degree from student,score where student.sno=score.sno; 15.查询所有学生的sno,cname,degree select sno,cname,degree from score,course where course.cno=score.cno; 16.查询所有学生的sname,cname,degree(三表) select sname,cname,degree from student,course,score where student.sno=score.sno and course.cno=score.cno; 17.查询95031班学生每门课的平均分 select * from student where class=&apos;95031&apos;; select cno,avg(degree) from score where sno in (select sno from student where class=&apos;95031&apos;) group by cno; 18.查询3-105课程成绩高于109号同学3-105成绩的所有同学记录 select * from score where cno=&apos;3-105&apos; and degree&gt; (select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;); 19.查询成绩高于学号为109,课程号为3-105的成绩的所有记录 select * from score where degree&gt; (select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;); 20.查询和学号为108，101的同学同年出生的所有学生的sno,sname和sbirthday select year(sbirthday) from student where sno in(108,101); select sno,sname,sbirthday from student where year(sbirthday) in(select year(sbirthday) from student where sno in(108,101)); 21.张旭教师任课的学生成绩 select * from teacher where tname=&apos;张旭&apos;; select cno from course where tno=(select tno from teacher where tname=&apos;张旭&apos;); select * from score where cno=(select cno from course where tno=(select tno from teacher where tname=&apos;张旭&apos;)); 22.查询选修某课程的同学人数多于五人教师姓名 insert into score VALUES(&apos;101&apos;,&apos;3-105&apos;,&apos;90&apos;); insert into score VALUES(&apos;102&apos;,&apos;3-105&apos;,&apos;91&apos;); insert into score VALUES(&apos;104&apos;,&apos;3-105&apos;,&apos;89&apos;); select cno from score group by cno HAVING COUNT(*)&gt;5; select * from teacher; select * from course; select tno from course where cno=(select cno from score group by cno HAVING COUNT(*)&gt;5); select tname from teacher where tno=(select tno from course where cno=(select cno from score group by cno HAVING COUNT(*)&gt;5)); 23.查询95033班和95031班全体同学记录 select * from student where class in(95031,95033); 24.查询存在有85分以上成绩的课程cno select cno,degree from score where degree&gt;85; 25.查询出计算机系教师所教课程的成绩表 select * from teacher where depart=&apos;计算机系&apos;; select * from course where tno in (select tno from teacher where depart=&apos;计算机系&apos;); select * from score where cno in (select cno from course where tno in (select tno from teacher where depart=&apos;计算机系&apos;)); 26.查询计算机系和电子工程系不同职称的教师的tname和prof union 求并集 select prof from teacher where depart=&apos;电子工程系&apos;; select * from teacher where depart=&apos;计算机系&apos; and prof not in(select prof from teacher where depart=&apos;电子工程系&apos;) union select * from teacher where depart=&apos;电子工程系&apos; and prof not in(select prof from teacher where depart=&apos;计算机系&apos;); 27.查询选修编号为3-105课程并且成绩至少高于选修编号为3-245的同学的cno,sno,degree并且按照degree从高到低排列 select * from score where cno=&apos;3-245&apos;; select * from score where cno=&apos;3-105&apos;; 至少? 大于其中至少一个,any select * from score where cno=&apos;3-105&apos; and degree&gt;any(select degree from score where cno=&apos;3-245&apos;) order by degree desc; 28.查询选修编号3-105且成绩高于3-245的同学的cno,sno,degree select * from score where cno=&apos;3-105&apos; and degree&gt;all(select degree from score where cno=&apos;3-245&apos;); 29.查询所有教师同学的name sex birthday 别名？ as select tname as name,tsex as sex,tbirthday as birthday from teacher union select sname,ssex,sbirthday from student; 30.查询成绩比该课程平均成绩低的同学的成绩表 select cno,avg(degree) from score group by cno; select * from score a where degree&lt;(select avg(degree) from score b where a.cno = b.cno); 31.查询所有任课教师的Tname和Depart select * from teacher; 任课：课程表中有课程 select * from course; select tname,depart from teacher where tno in(select tno from course); 32.查询至少有两名男生的班号 select class from student where ssex = &apos;男&apos; group by class having COUNT(*)&gt;1; 33.查询student表中不姓王的同学的记录 select * from student where sname not like &apos;王%&apos;; 34.查询student中每个学生的姓名和年龄 年龄=当前年份-出生年份 select year(now()); select sname,year(now())-year(sbirthday) as &apos;年龄&apos; from student; 35.查询student中最大和最小的sbirthday日期值 max min select max(sbirthday) as &apos;最大&apos;,min(sbirthday) as &apos;最小&apos; from student; 36.以班号和年龄的从大到小顺序查询student的全部记录 select * from student order by class desc,sbirthday asc; 37.查询男教师及其所上课程 select * from teacher; select * from course where tno in (select tno from teacher where tsex=&apos;男&apos;); 38.查询最高分同学的sno,cno degree select MAX(degree) from score; select * from score where degree=(select MAX(degree) from score); 39.查询和李军同性别的所有同学的sname select * from student; SELECT ssex from student where sname=&apos;李军&apos;; select sname from student where ssex=(SELECT ssex from student where sname=&apos;李军&apos;); 40.查询和李军同性别且同班的sname select sname from student where ssex=(SELECT ssex from student where sname=&apos;李军&apos;) and class=(select class from student where sname=&apos;李军&apos;); 41.查询所有选修计算机导论课程的男同学的成绩表 select * from student where ssex=&apos;男&apos;; select * from course where cname=&apos;计算机导论&apos;; select * from score where cno=(select cno from course where cname=&apos;计算机导论&apos;) and sno in (select sno from student where ssex=&apos;男&apos;); 42.--等级查找--假设使用如下命令创建了一个grade表 create table grade_( low int(3), upp int(3), grade char(1) ); insert into grade_ values(90,100,&apos;A&apos;); insert into grade_ values(89,90,&apos;B&apos;); insert into grade_ values(70,79,&apos;C&apos;); insert into grade_ values(60,69,&apos;D&apos;); insert into grade_ values(0,59,&apos;E&apos;); 查询所有同学的sno cno grade select sno,cno,grade from score,grade_ where degree BETWEEN low and upp; 43.-- 四种连接查询-- -- 内连接 1.inner join 2.join -- 外连接 1.左连接left join或者left outer join 2.右连接right join或者right outer join 3.完全外连接 full join或者full outer join 创建两个表： create database testjoin use testjoin -- person: id,name,cardId create table person( id int, name varchar(20), cardId int ); -- card: id,name create table card( id int, name varchar(20) ); show TABLES insert into card VALUES(1,&apos;饭卡&apos;); insert into card VALUES(2,&apos;建行卡&apos;); insert into card VALUES(3,&apos;农行卡&apos;); insert into card VALUES(4,&apos;工行卡&apos;); insert into card VALUES(5,&apos;邮政卡&apos;); select * from card; insert into person VALUES(1,&apos;张三&apos;,1); insert into person VALUES(2,&apos;李四&apos;,3); insert into person VALUES(3,&apos;王五&apos;,4); insert into person VALUES(4,&apos;赵六&apos;,5); insert into person VALUES(5,&apos;钱七&apos;,2); select * from card; -- 并没有创建外键 -- 1.inner join 查询(内连接) select * from person inner join card on person.cardId=card.id; select * from person join card on person.cardId=card.id; -- 内联查询，其实就是两张表中的数据，通过某个字段相等，查询出相关数据 -- 2.left join 查询(左外连接) select * from person left join card on person.cardId=card.id; select * from person left outer join card on person.cardId=card.id; -- 左外连接，会把左边表里的所有数据取出，而右边表的数据有就显示，没有就显示null -- 3.right join 查询(右外连接) select * from person right join card on person.cardId=card.id; select * from person right outer join card on person.cardId=card.id; -- 右外连接，会把右边表里的所有数据取出，而左边表的数据有就显示，没有就显示null -- 4.full join(全外连接) select * from person full join card on person.cardId=card.id; mysql不支持全连接 所以另一种方式表示 select * from person left join card on person.cardId=card.id UNION select * from person right join card on person.cardId=card.id;","link":"/2019/03/06/mysql基础练习/"}],"tags":[{"name":"ActiveMQ","slug":"ActiveMQ","link":"/tags/ActiveMQ/"},{"name":"中间件","slug":"中间件","link":"/tags/中间件/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"JVM","slug":"JVM","link":"/tags/JVM/"},{"name":"Aviator","slug":"Aviator","link":"/tags/Aviator/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"版本控制","slug":"版本控制","link":"/tags/版本控制/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"java基础","slug":"java基础","link":"/tags/java基础/"},{"name":"集合类","slug":"集合类","link":"/tags/集合类/"},{"name":"面试必备","slug":"面试必备","link":"/tags/面试必备/"},{"name":"网络，HTTP","slug":"网络，HTTP","link":"/tags/网络，HTTP/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"sql基础","slug":"sql基础","link":"/tags/sql基础/"}],"categories":[{"name":"消息中间件","slug":"消息中间件","link":"/categories/消息中间件/"},{"name":"Git操作","slug":"Git操作","link":"/categories/Git操作/"},{"name":"java基础","slug":"java基础","link":"/categories/java基础/"},{"name":"网络","slug":"网络","link":"/categories/网络/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"}]}